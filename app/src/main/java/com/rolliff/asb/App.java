/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.rolliff.asb;

import java.time.Duration;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicInteger;

import com.azure.core.util.BinaryData;
import com.azure.messaging.servicebus.ServiceBusClientBuilder;
import com.azure.messaging.servicebus.ServiceBusMessage;
import com.azure.messaging.servicebus.ServiceBusSenderAsyncClient;

import reactor.core.Disposable;
import reactor.core.publisher.Flux;

public class App
{
  public static void main(String[] args)
  {
    new App().shoveMessagesIntoAsb();
  }

  public void shoveMessagesIntoAsb()
  {
    final AtomicInteger messagesSent = new AtomicInteger();
    final int numberOfMessagesToSend = 1000000;

    try (final AutoCloseable ignored = startLogging(messagesSent);
        final ServiceBusSenderAsyncClient sender = createSender())
    {
      Flux.range(0, numberOfMessagesToSend)
          .map(this::createServiceBusMessage)
          .flatMap(message -> sender
              .sendMessage(message)
              .doOnSuccess(unused -> messagesSent.incrementAndGet()))
          .blockLast();
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }

  private ServiceBusSenderAsyncClient createSender()
  {
    final String connectionString = "<changeme>";
    final String topicName = "insert-topic";
    return new ServiceBusClientBuilder()
        .connectionString(connectionString)
        .sender()
        .topicName(topicName)
        .buildAsyncClient();
  }

  private AutoCloseable startLogging(AtomicInteger messagesSent)
  {

    final Disposable disposable = Flux.interval(Duration.ofSeconds(1)).subscribe(runningTimeInSeconds ->
    {
      final int currentCount = messagesSent.get();
      System.out.printf("%d: %d (%d/s)%n", runningTimeInSeconds + 1, currentCount,
          currentCount / (runningTimeInSeconds + 1));
    });
    return disposable::dispose;
  }

  public static byte[] generateRandomBytes(int length)
  {
    byte[] randomBytes = new byte[length];
    new Random().nextBytes(randomBytes);
    return randomBytes;
  }

  private ServiceBusMessage createServiceBusMessage(Integer integer)
  {
    ServiceBusMessage serviceBusMessage = new ServiceBusMessage(BinaryData.fromBytes(generateRandomBytes(1024)));
    serviceBusMessage.setMessageId(UUID.randomUUID().toString());
    return serviceBusMessage;
  }
}
